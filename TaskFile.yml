version: "3"

dotenv: [".env"]

tasks:
  default:
    cmds:
      - task run

  build:
    desc: Build the Go application binary
    cmds:
      - go build -o ./bin/api ./cmd/api

  run:
    desc: Run the application using Docker Compose and Air for hot reloading
    cmds:
      - docker-compose up -d
      - air

  stop:
    desc: Stop the Docker Compose environment
    cmds:
      - docker-compose down

  tests:
    desc: Run all Go tests
    cmds:
      - go test -v ./...

  # -------------------
  # Benchmarking tasks
  # -------------------

  bench:
    desc: Run all benchmarks
    cmds:
      - go test -bench=. -benchmem -benchtime=1s ./internal/gateway/middleware
      - go test -bench=. -benchmem -benchtime=1s ./internal/gateway/policies

  bench:middleware:
    desc: Benchmark middleware components
    cmds:
      - go test -bench=. -benchmem -benchtime=1s ./internal/gateway/middleware

  bench:policies:
    desc: Benchmark policy engine
    cmds:
      - go test -bench=. -benchmem -benchtime=1s ./internal/gateway/policies

  bench:compare:
    desc: Compare benchmarks before/after changes (requires old.txt baseline)
    cmds:
      - go test -bench=. -benchmem ./internal/gateway/middleware > new.txt
      - benchstat old.txt new.txt

  bench:save:
    desc: Save current benchmark results as baseline
    cmds:
      - go test -bench=. -benchmem ./internal/gateway/middleware > old.txt
      - echo "Baseline saved to old.txt"

  # -------------------
  # Atlas database tasks
  # -------------------

  db:status:
    desc: Show schema status and diff
    cmds:
      - atlas schema diff --from "$ATLAS_DATABASE_URL" --to file://db/schema

  db:apply:
    desc: Apply schema changes directly (DEV ONLY - non-versioned)
    cmds:
      - psql "$POSTGRES_DSN" -f db/schema_pre.sql
      - atlas schema apply --to file://db/schema --url "$ATLAS_DATABASE_URL" --auto-approve
      - psql "$POSTGRES_DSN" -f db/schema_post.sql

  db:migrate:diff:
    desc: Generate Goose migration from schema changes
    cmds:
      - atlas migrate diff --env local {{.CLI_ARGS | default "auto_migration"}}

  db:migrate:apply:
    desc: Apply pending Goose migrations (what your app runs)
    cmds:
      - psql "$POSTGRES_DSN" -f db/schema_pre.sql
      - goose -dir ./db/migrations postgres "$POSTGRES_DSN" up
      - psql "$POSTGRES_DSN" -f db/schema_post.sql

  db:migrate:new:
    desc: Create and apply new Goose migration from schema changes
    cmds:
      - atlas migrate diff --env local {{.CLI_ARGS | default "auto_migration"}}
      - psql "$POSTGRES_DSN" -f db/schema_pre.sql
      - goose -dir ./db/migrations postgres "$POSTGRES_DSN" up
      - psql "$POSTGRES_DSN" -f db/schema_post.sql

  db:migrate:status:
    desc: Show Goose migration status
    cmds:
      - goose -dir ./db/migrations postgres "$POSTGRES_DSN" status

  db:plan:
    desc: Plan schema changes (dry run)
    cmds:
      - atlas schema plan --from "$ATLAS_DATABASE_URL" --to file://db/schema

  db:inspect:
    desc: Inspect current database schema
    cmds:
      - atlas schema inspect --url "$ATLAS_DATABASE_URL"

  db:reset:
    desc: Reset database and apply schema
    cmds:
      - docker-compose down -v
      - docker-compose up -d postgres
      - sleep 3
      - psql "$POSTGRES_DSN" -f db/schema_pre.sql
      - atlas schema apply --to file://db/schema --url "$ATLAS_DATABASE_URL" --auto-approve
      - psql "$POSTGRES_DSN" -f db/schema_post.sql

  # -------------------
  # SQLC generation
  # -------------------

  generate:
    desc: Generate SQLC code from queries
    cmds:
      - atlas schema inspect --url "$ATLAS_DATABASE_URL" --exclude goose_db_version --format '{{ sql . "  " }}' > db/schema.sql
      - rm -rf ./internal/db && sqlc generate -f ./db/sqlc.yml

  generate:sqlc:
    desc: Generate only SQLC code (without schema update)
    cmds:
      - rm -rf ./internal/db && sqlc generate -f ./db/sqlc.yml

  clean:migrations:
    desc: Remove all migration files (careful!)
    cmds:
      - rm -rf ./db/migrations/*
