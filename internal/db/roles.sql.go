// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (org_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, org_id, name, description, created_at
`

type CreateRoleParams struct {
	OrgID       uuid.UUID `json:"org_id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.OrgID, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const findRoleByOrgAndName = `-- name: FindRoleByOrgAndName :one
SELECT 
  id,
  org_id,
  name,
  description,
  created_at
FROM roles
WHERE org_id = $1 AND name = $2
LIMIT 1
`

type FindRoleByOrgAndNameParams struct {
	OrgID uuid.UUID `json:"org_id"`
	Name  string    `json:"name"`
}

func (q *Queries) FindRoleByOrgAndName(ctx context.Context, arg FindRoleByOrgAndNameParams) (Role, error) {
	row := q.db.QueryRow(ctx, findRoleByOrgAndName, arg.OrgID, arg.Name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
