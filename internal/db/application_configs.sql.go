// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: application_configs.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createApplicationConfig = `-- name: CreateApplicationConfig :one
INSERT INTO application_configs (
  app_id, org_id, environment, config
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, app_id, org_id, environment, config, created_at, updated_at
`

type CreateApplicationConfigParams struct {
	AppID       uuid.UUID `json:"app_id"`
	OrgID       uuid.UUID `json:"org_id"`
	Environment string    `json:"environment"`
	Config      []byte    `json:"config"`
}

func (q *Queries) CreateApplicationConfig(ctx context.Context, arg CreateApplicationConfigParams) (ApplicationConfig, error) {
	row := q.db.QueryRow(ctx, createApplicationConfig,
		arg.AppID,
		arg.OrgID,
		arg.Environment,
		arg.Config,
	)
	var i ApplicationConfig
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.OrgID,
		&i.Environment,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApplicationConfig = `-- name: DeleteApplicationConfig :exec
DELETE FROM application_configs
WHERE id = $1
`

func (q *Queries) DeleteApplicationConfig(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplicationConfig, id)
	return err
}

const getApplicationConfig = `-- name: GetApplicationConfig :one
SELECT id, app_id, org_id, environment, config, created_at, updated_at FROM application_configs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetApplicationConfig(ctx context.Context, id uuid.UUID) (ApplicationConfig, error) {
	row := q.db.QueryRow(ctx, getApplicationConfig, id)
	var i ApplicationConfig
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.OrgID,
		&i.Environment,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getApplicationConfigByEnv = `-- name: GetApplicationConfigByEnv :one
SELECT id, app_id, org_id, environment, config, created_at, updated_at FROM application_configs
WHERE app_id = $1 AND environment = $2 LIMIT 1
`

type GetApplicationConfigByEnvParams struct {
	AppID       uuid.UUID `json:"app_id"`
	Environment string    `json:"environment"`
}

func (q *Queries) GetApplicationConfigByEnv(ctx context.Context, arg GetApplicationConfigByEnvParams) (ApplicationConfig, error) {
	row := q.db.QueryRow(ctx, getApplicationConfigByEnv, arg.AppID, arg.Environment)
	var i ApplicationConfig
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.OrgID,
		&i.Environment,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listApplicationConfigs = `-- name: ListApplicationConfigs :many
SELECT id, app_id, org_id, environment, config, created_at, updated_at FROM application_configs
WHERE app_id = $1
ORDER BY environment
`

func (q *Queries) ListApplicationConfigs(ctx context.Context, appID uuid.UUID) ([]ApplicationConfig, error) {
	rows, err := q.db.Query(ctx, listApplicationConfigs, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationConfig
	for rows.Next() {
		var i ApplicationConfig
		if err := rows.Scan(
			&i.ID,
			&i.AppID,
			&i.OrgID,
			&i.Environment,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplicationConfig = `-- name: UpdateApplicationConfig :one
UPDATE application_configs
SET config = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, app_id, org_id, environment, config, created_at, updated_at
`

type UpdateApplicationConfigParams struct {
	ID     uuid.UUID `json:"id"`
	Config []byte    `json:"config"`
}

func (q *Queries) UpdateApplicationConfig(ctx context.Context, arg UpdateApplicationConfigParams) (ApplicationConfig, error) {
	row := q.db.QueryRow(ctx, updateApplicationConfig, arg.ID, arg.Config)
	var i ApplicationConfig
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.OrgID,
		&i.Environment,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
