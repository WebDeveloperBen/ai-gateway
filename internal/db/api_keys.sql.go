// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api_keys.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (org_id, user_id, key_hash)
VALUES ($1, $2, $3)
RETURNING id, org_id, user_id, key_hash, created_at, last_used
`

type CreateAPIKeyParams struct {
	OrgID   uuid.UUID `json:"org_id"`
	UserID  uuid.UUID `json:"user_id"`
	KeyHash string    `json:"key_hash"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.OrgID, arg.UserID, arg.KeyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.UserID,
		&i.KeyHash,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, org_id, user_id, key_hash, created_at, last_used
FROM api_keys
WHERE id = $1
`

func (q *Queries) GetAPIKey(ctx context.Context, id uuid.UUID) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.UserID,
		&i.KeyHash,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const getAPIKeyByHash = `-- name: GetAPIKeyByHash :one
SELECT id, org_id, user_id, key_hash, created_at, last_used
FROM api_keys
WHERE key_hash = $1
`

func (q *Queries) GetAPIKeyByHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.UserID,
		&i.KeyHash,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE api_keys
SET last_used = now()
WHERE id = $1
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, id)
	return err
}
