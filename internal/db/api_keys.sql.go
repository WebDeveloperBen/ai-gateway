// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api_keys.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAPIKey = `-- name: DeleteAPIKey :execrows
DELETE FROM api_keys
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAPIKey, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAPIKeyByID = `-- name: GetAPIKeyByID :one
SELECT id, org_id, app_id, user_id, key_prefix, secret_phc, status, last_four, expires_at, last_used_at, metadata, created_at FROM api_keys
WHERE id = $1
`

func (q *Queries) GetAPIKeyByID(ctx context.Context, id uuid.UUID) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByID, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.AppID,
		&i.UserID,
		&i.KeyPrefix,
		&i.SecretPhc,
		&i.Status,
		&i.LastFour,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getAPIKeyByPrefix = `-- name: GetAPIKeyByPrefix :one
SELECT id, org_id, app_id, user_id, key_prefix, secret_phc, status, last_four, expires_at, last_used_at, metadata, created_at FROM api_keys
WHERE key_prefix = $1
`

func (q *Queries) GetAPIKeyByPrefix(ctx context.Context, keyPrefix string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByPrefix, keyPrefix)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.AppID,
		&i.UserID,
		&i.KeyPrefix,
		&i.SecretPhc,
		&i.Status,
		&i.LastFour,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getSecretPHCByPrefix = `-- name: GetSecretPHCByPrefix :one
SELECT secret_phc FROM api_keys
WHERE key_prefix = $1
`

func (q *Queries) GetSecretPHCByPrefix(ctx context.Context, keyPrefix string) (string, error) {
	row := q.db.QueryRow(ctx, getSecretPHCByPrefix, keyPrefix)
	var secret_phc string
	err := row.Scan(&secret_phc)
	return secret_phc, err
}

const insertAPIKey = `-- name: InsertAPIKey :one
INSERT INTO api_keys (
  org_id,
  app_id,
  user_id,
  key_prefix,
  secret_phc,
  status,
  last_four,
  expires_at,
  metadata
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, org_id, app_id, user_id, key_prefix, secret_phc, status, last_four, expires_at, last_used_at, metadata, created_at
`

type InsertAPIKeyParams struct {
	OrgID     uuid.UUID          `json:"org_id"`
	AppID     uuid.UUID          `json:"app_id"`
	UserID    uuid.UUID          `json:"user_id"`
	KeyPrefix string             `json:"key_prefix"`
	SecretPhc string             `json:"secret_phc"`
	Status    string             `json:"status"`
	LastFour  string             `json:"last_four"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	Metadata  []byte             `json:"metadata"`
}

func (q *Queries) InsertAPIKey(ctx context.Context, arg InsertAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, insertAPIKey,
		arg.OrgID,
		arg.AppID,
		arg.UserID,
		arg.KeyPrefix,
		arg.SecretPhc,
		arg.Status,
		arg.LastFour,
		arg.ExpiresAt,
		arg.Metadata,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.AppID,
		&i.UserID,
		&i.KeyPrefix,
		&i.SecretPhc,
		&i.Status,
		&i.LastFour,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const listAPIKeysByAppID = `-- name: ListAPIKeysByAppID :many
SELECT id, org_id, app_id, user_id, key_prefix, secret_phc, status, last_four, expires_at, last_used_at, metadata, created_at FROM api_keys
WHERE app_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeysByAppID(ctx context.Context, appID uuid.UUID) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeysByAppID, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.AppID,
			&i.UserID,
			&i.KeyPrefix,
			&i.SecretPhc,
			&i.Status,
			&i.LastFour,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKeysByOrgID = `-- name: ListAPIKeysByOrgID :many
SELECT id, org_id, app_id, user_id, key_prefix, secret_phc, status, last_four, expires_at, last_used_at, metadata, created_at FROM api_keys
WHERE org_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeysByOrgID(ctx context.Context, orgID uuid.UUID) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeysByOrgID, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.AppID,
			&i.UserID,
			&i.KeyPrefix,
			&i.SecretPhc,
			&i.Status,
			&i.LastFour,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :execrows
UPDATE api_keys
SET last_used_at = now()
WHERE key_prefix = $1
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, keyPrefix string) (int64, error) {
	result, err := q.db.Exec(ctx, updateAPIKeyLastUsed, keyPrefix)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateAPIKeyStatus = `-- name: UpdateAPIKeyStatus :execrows
UPDATE api_keys
SET status = $2
WHERE key_prefix = $1
`

type UpdateAPIKeyStatusParams struct {
	KeyPrefix string `json:"key_prefix"`
	Status    string `json:"status"`
}

func (q *Queries) UpdateAPIKeyStatus(ctx context.Context, arg UpdateAPIKeyStatusParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateAPIKeyStatus, arg.KeyPrefix, arg.Status)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
