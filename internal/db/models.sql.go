// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: models.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createModel = `-- name: CreateModel :one
INSERT INTO models (
  org_id, provider, model_name, deployment_name, endpoint_url,
  auth_type, auth_config, metadata, enabled
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, org_id, provider, model_name, deployment_name, endpoint_url, auth_type, auth_config, metadata, enabled, created_at, updated_at
`

type CreateModelParams struct {
	OrgID          uuid.UUID `json:"org_id"`
	Provider       string    `json:"provider"`
	ModelName      string    `json:"model_name"`
	DeploymentName *string   `json:"deployment_name"`
	EndpointUrl    string    `json:"endpoint_url"`
	AuthType       string    `json:"auth_type"`
	AuthConfig     []byte    `json:"auth_config"`
	Metadata       []byte    `json:"metadata"`
	Enabled        bool      `json:"enabled"`
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, createModel,
		arg.OrgID,
		arg.Provider,
		arg.ModelName,
		arg.DeploymentName,
		arg.EndpointUrl,
		arg.AuthType,
		arg.AuthConfig,
		arg.Metadata,
		arg.Enabled,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Provider,
		&i.ModelName,
		&i.DeploymentName,
		&i.EndpointUrl,
		&i.AuthType,
		&i.AuthConfig,
		&i.Metadata,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteModel = `-- name: DeleteModel :exec
DELETE FROM models
WHERE id = $1
`

func (q *Queries) DeleteModel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteModel, id)
	return err
}

const disableModel = `-- name: DisableModel :exec
UPDATE models
SET enabled = false,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) DisableModel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableModel, id)
	return err
}

const enableModel = `-- name: EnableModel :exec
UPDATE models
SET enabled = true,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) EnableModel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, enableModel, id)
	return err
}

const getModel = `-- name: GetModel :one
SELECT id, org_id, provider, model_name, deployment_name, endpoint_url, auth_type, auth_config, metadata, enabled, created_at, updated_at FROM models
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetModel(ctx context.Context, id uuid.UUID) (Model, error) {
	row := q.db.QueryRow(ctx, getModel, id)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Provider,
		&i.ModelName,
		&i.DeploymentName,
		&i.EndpointUrl,
		&i.AuthType,
		&i.AuthConfig,
		&i.Metadata,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getModelByProviderAndName = `-- name: GetModelByProviderAndName :one
SELECT id, org_id, provider, model_name, deployment_name, endpoint_url, auth_type, auth_config, metadata, enabled, created_at, updated_at FROM models
WHERE org_id = $1 AND provider = $2 AND model_name = $3 LIMIT 1
`

type GetModelByProviderAndNameParams struct {
	OrgID     uuid.UUID `json:"org_id"`
	Provider  string    `json:"provider"`
	ModelName string    `json:"model_name"`
}

func (q *Queries) GetModelByProviderAndName(ctx context.Context, arg GetModelByProviderAndNameParams) (Model, error) {
	row := q.db.QueryRow(ctx, getModelByProviderAndName, arg.OrgID, arg.Provider, arg.ModelName)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Provider,
		&i.ModelName,
		&i.DeploymentName,
		&i.EndpointUrl,
		&i.AuthType,
		&i.AuthConfig,
		&i.Metadata,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEnabledModels = `-- name: ListEnabledModels :many
SELECT id, org_id, provider, model_name, deployment_name, endpoint_url, auth_type, auth_config, metadata, enabled, created_at, updated_at FROM models
WHERE org_id = $1 AND enabled = true
ORDER BY provider, model_name
`

func (q *Queries) ListEnabledModels(ctx context.Context, orgID uuid.UUID) ([]Model, error) {
	rows, err := q.db.Query(ctx, listEnabledModels, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Provider,
			&i.ModelName,
			&i.DeploymentName,
			&i.EndpointUrl,
			&i.AuthType,
			&i.AuthConfig,
			&i.Metadata,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listModels = `-- name: ListModels :many
SELECT id, org_id, provider, model_name, deployment_name, endpoint_url, auth_type, auth_config, metadata, enabled, created_at, updated_at FROM models
WHERE org_id = $1
ORDER BY provider, model_name
`

func (q *Queries) ListModels(ctx context.Context, orgID uuid.UUID) ([]Model, error) {
	rows, err := q.db.Query(ctx, listModels, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Provider,
			&i.ModelName,
			&i.DeploymentName,
			&i.EndpointUrl,
			&i.AuthType,
			&i.AuthConfig,
			&i.Metadata,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModel = `-- name: UpdateModel :one
UPDATE models
SET provider = $2,
    model_name = $3,
    deployment_name = $4,
    endpoint_url = $5,
    auth_type = $6,
    auth_config = $7,
    metadata = $8,
    enabled = $9,
    updated_at = now()
WHERE id = $1
RETURNING id, org_id, provider, model_name, deployment_name, endpoint_url, auth_type, auth_config, metadata, enabled, created_at, updated_at
`

type UpdateModelParams struct {
	ID             uuid.UUID `json:"id"`
	Provider       string    `json:"provider"`
	ModelName      string    `json:"model_name"`
	DeploymentName *string   `json:"deployment_name"`
	EndpointUrl    string    `json:"endpoint_url"`
	AuthType       string    `json:"auth_type"`
	AuthConfig     []byte    `json:"auth_config"`
	Metadata       []byte    `json:"metadata"`
	Enabled        bool      `json:"enabled"`
}

func (q *Queries) UpdateModel(ctx context.Context, arg UpdateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, updateModel,
		arg.ID,
		arg.Provider,
		arg.ModelName,
		arg.DeploymentName,
		arg.EndpointUrl,
		arg.AuthType,
		arg.AuthConfig,
		arg.Metadata,
		arg.Enabled,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Provider,
		&i.ModelName,
		&i.DeploymentName,
		&i.EndpointUrl,
		&i.AuthType,
		&i.AuthConfig,
		&i.Metadata,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
