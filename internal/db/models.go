// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApiKey struct {
	ID         uuid.UUID          `json:"id"`
	OrgID      uuid.UUID          `json:"org_id"`
	AppID      uuid.UUID          `json:"app_id"`
	UserID     uuid.UUID          `json:"user_id"`
	KeyPrefix  string             `json:"key_prefix"`
	SecretPhc  string             `json:"secret_phc"`
	Status     string             `json:"status"`
	LastFour   string             `json:"last_four"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
	LastUsedAt pgtype.Timestamptz `json:"last_used_at"`
	Metadata   []byte             `json:"metadata"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type Application struct {
	ID          uuid.UUID          `json:"id"`
	OrgID       uuid.UUID          `json:"org_id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type ApplicationConfig struct {
	ID          uuid.UUID          `json:"id"`
	AppID       uuid.UUID          `json:"app_id"`
	OrgID       uuid.UUID          `json:"org_id"`
	Environment string             `json:"environment"`
	Config      []byte             `json:"config"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type GooseDbVersion struct {
	ID        int32            `json:"id"`
	VersionID int64            `json:"version_id"`
	IsApplied bool             `json:"is_applied"`
	Tstamp    pgtype.Timestamp `json:"tstamp"`
}

type Model struct {
	ID             uuid.UUID          `json:"id"`
	OrgID          uuid.UUID          `json:"org_id"`
	Provider       string             `json:"provider"`
	ModelName      string             `json:"model_name"`
	DeploymentName *string            `json:"deployment_name"`
	EndpointUrl    string             `json:"endpoint_url"`
	AuthType       string             `json:"auth_type"`
	AuthConfig     []byte             `json:"auth_config"`
	Metadata       []byte             `json:"metadata"`
	Enabled        bool               `json:"enabled"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type Organisation struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type OrganisationInvite struct {
	ID        uuid.UUID          `json:"id"`
	OrgID     uuid.UUID          `json:"org_id"`
	Email     string             `json:"email"`
	RoleID    *uuid.UUID         `json:"role_id"`
	InvitedBy uuid.UUID          `json:"invited_by"`
	Token     string             `json:"token"`
	Accepted  bool               `json:"accepted"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

type OrganisationKey struct {
	ID        uuid.UUID          `json:"id"`
	OrgID     uuid.UUID          `json:"org_id"`
	KeyHash   string             `json:"key_hash"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	LastUsed  pgtype.Timestamptz `json:"last_used"`
}

type OrganisationRole struct {
	OrgID     uuid.UUID          `json:"org_id"`
	RoleID    uuid.UUID          `json:"role_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type OrganisationUser struct {
	UserID    uuid.UUID          `json:"user_id"`
	OrgID     uuid.UUID          `json:"org_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Policy struct {
	ID         uuid.UUID          `json:"id"`
	OrgID      uuid.UUID          `json:"org_id"`
	PolicyType string             `json:"policy_type"`
	Config     []byte             `json:"config"`
	Enabled    bool               `json:"enabled"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type PolicyApplication struct {
	PolicyID  uuid.UUID          `json:"policy_id"`
	AppID     uuid.UUID          `json:"app_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Role struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type UsageMetric struct {
	ID                uuid.UUID          `json:"id"`
	OrgID             uuid.UUID          `json:"org_id"`
	AppID             uuid.UUID          `json:"app_id"`
	ApiKeyID          uuid.UUID          `json:"api_key_id"`
	ModelID           *uuid.UUID         `json:"model_id"`
	Provider          string             `json:"provider"`
	ModelName         string             `json:"model_name"`
	PromptTokens      int32              `json:"prompt_tokens"`
	CompletionTokens  int32              `json:"completion_tokens"`
	TotalTokens       int32              `json:"total_tokens"`
	RequestSizeBytes  int32              `json:"request_size_bytes"`
	ResponseSizeBytes int32              `json:"response_size_bytes"`
	Timestamp         pgtype.Timestamptz `json:"timestamp"`
}

type User struct {
	ID        uuid.UUID          `json:"id"`
	OrgID     uuid.UUID          `json:"org_id"`
	Sub       *string            `json:"sub"`
	Email     string             `json:"email"`
	Name      *string            `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type UserRole struct {
	UserID    uuid.UUID          `json:"user_id"`
	RoleID    uuid.UUID          `json:"role_id"`
	OrgID     uuid.UUID          `json:"org_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}
