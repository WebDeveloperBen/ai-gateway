// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: applications.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (
  org_id, name, description
) VALUES (
  $1, $2, $3
)
RETURNING id, org_id, name, description, created_at, updated_at
`

type CreateApplicationParams struct {
	OrgID       uuid.UUID `json:"org_id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, createApplication, arg.OrgID, arg.Name, arg.Description)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM applications
WHERE id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const getApplication = `-- name: GetApplication :one
SELECT id, org_id, name, description, created_at, updated_at FROM applications
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetApplication(ctx context.Context, id uuid.UUID) (Application, error) {
	row := q.db.QueryRow(ctx, getApplication, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getApplicationByName = `-- name: GetApplicationByName :one
SELECT id, org_id, name, description, created_at, updated_at FROM applications
WHERE org_id = $1 AND name = $2 LIMIT 1
`

type GetApplicationByNameParams struct {
	OrgID uuid.UUID `json:"org_id"`
	Name  string    `json:"name"`
}

func (q *Queries) GetApplicationByName(ctx context.Context, arg GetApplicationByNameParams) (Application, error) {
	row := q.db.QueryRow(ctx, getApplicationByName, arg.OrgID, arg.Name)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listApplications = `-- name: ListApplications :many
SELECT id, org_id, name, description, created_at, updated_at FROM applications
WHERE org_id = $1
ORDER BY name
`

func (q *Queries) ListApplications(ctx context.Context, orgID uuid.UUID) ([]Application, error) {
	rows, err := q.db.Query(ctx, listApplications, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE applications
SET name = $2,
    description = $3,
    updated_at = now()
WHERE id = $1
RETURNING id, org_id, name, description, created_at, updated_at
`

type UpdateApplicationParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, updateApplication, arg.ID, arg.Name, arg.Description)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
