// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: policies.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const attachPolicyToApp = `-- name: AttachPolicyToApp :exec
INSERT INTO policy_applications (policy_id, app_id)
VALUES ($1, $2)
ON CONFLICT (policy_id, app_id) DO NOTHING
`

type AttachPolicyToAppParams struct {
	PolicyID uuid.UUID `json:"policy_id"`
	AppID    uuid.UUID `json:"app_id"`
}

func (q *Queries) AttachPolicyToApp(ctx context.Context, arg AttachPolicyToAppParams) error {
	_, err := q.db.Exec(ctx, attachPolicyToApp, arg.PolicyID, arg.AppID)
	return err
}

const createPolicy = `-- name: CreatePolicy :one
INSERT INTO policies (
  org_id, policy_type, config, enabled
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, org_id, policy_type, config, enabled, created_at, updated_at
`

type CreatePolicyParams struct {
	OrgID      uuid.UUID `json:"org_id"`
	PolicyType string    `json:"policy_type"`
	Config     []byte    `json:"config"`
	Enabled    bool      `json:"enabled"`
}

func (q *Queries) CreatePolicy(ctx context.Context, arg CreatePolicyParams) (Policy, error) {
	row := q.db.QueryRow(ctx, createPolicy,
		arg.OrgID,
		arg.PolicyType,
		arg.Config,
		arg.Enabled,
	)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.PolicyType,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePolicy = `-- name: DeletePolicy :exec
DELETE FROM policies
WHERE id = $1
`

func (q *Queries) DeletePolicy(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePolicy, id)
	return err
}

const detachPolicyFromApp = `-- name: DetachPolicyFromApp :exec
DELETE FROM policy_applications
WHERE policy_id = $1 AND app_id = $2
`

type DetachPolicyFromAppParams struct {
	PolicyID uuid.UUID `json:"policy_id"`
	AppID    uuid.UUID `json:"app_id"`
}

func (q *Queries) DetachPolicyFromApp(ctx context.Context, arg DetachPolicyFromAppParams) error {
	_, err := q.db.Exec(ctx, detachPolicyFromApp, arg.PolicyID, arg.AppID)
	return err
}

const disablePolicy = `-- name: DisablePolicy :exec
UPDATE policies
SET enabled = false,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) DisablePolicy(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disablePolicy, id)
	return err
}

const enablePolicy = `-- name: EnablePolicy :exec
UPDATE policies
SET enabled = true,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) EnablePolicy(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, enablePolicy, id)
	return err
}

const getAppsForPolicy = `-- name: GetAppsForPolicy :many
SELECT a.id, a.org_id, a.name, a.description, a.created_at, a.updated_at FROM applications a
JOIN policy_applications pa ON a.id = pa.app_id
WHERE pa.policy_id = $1
ORDER BY a.name
`

func (q *Queries) GetAppsForPolicy(ctx context.Context, policyID uuid.UUID) ([]Application, error) {
	rows, err := q.db.Query(ctx, getAppsForPolicy, policyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoliciesByType = `-- name: GetPoliciesByType :many
SELECT p.id, p.org_id, p.policy_type, p.config, p.enabled, p.created_at, p.updated_at FROM policies p
JOIN policy_applications pa ON p.id = pa.policy_id
WHERE pa.app_id = $1 AND p.policy_type = $2
ORDER BY p.created_at
`

type GetPoliciesByTypeParams struct {
	AppID      uuid.UUID `json:"app_id"`
	PolicyType string    `json:"policy_type"`
}

func (q *Queries) GetPoliciesByType(ctx context.Context, arg GetPoliciesByTypeParams) ([]Policy, error) {
	rows, err := q.db.Query(ctx, getPoliciesByType, arg.AppID, arg.PolicyType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Policy
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.PolicyType,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoliciesForApp = `-- name: GetPoliciesForApp :many
SELECT p.id, p.org_id, p.policy_type, p.config, p.enabled, p.created_at, p.updated_at FROM policies p
JOIN policy_applications pa ON p.id = pa.policy_id
WHERE pa.app_id = $1
ORDER BY p.policy_type
`

func (q *Queries) GetPoliciesForApp(ctx context.Context, appID uuid.UUID) ([]Policy, error) {
	rows, err := q.db.Query(ctx, getPoliciesForApp, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Policy
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.PolicyType,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPolicy = `-- name: GetPolicy :one
SELECT id, org_id, policy_type, config, enabled, created_at, updated_at FROM policies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPolicy(ctx context.Context, id uuid.UUID) (Policy, error) {
	row := q.db.QueryRow(ctx, getPolicy, id)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.PolicyType,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEnabledPolicies = `-- name: ListEnabledPolicies :many
SELECT p.id, p.org_id, p.policy_type, p.config, p.enabled, p.created_at, p.updated_at FROM policies p
JOIN policy_applications pa ON p.id = pa.policy_id
WHERE pa.app_id = $1 AND p.enabled = true
ORDER BY p.policy_type
LIMIT $2 OFFSET $3
`

type ListEnabledPoliciesParams struct {
	AppID  uuid.UUID `json:"app_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListEnabledPolicies(ctx context.Context, arg ListEnabledPoliciesParams) ([]Policy, error) {
	rows, err := q.db.Query(ctx, listEnabledPolicies, arg.AppID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Policy
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.PolicyType,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPolicies = `-- name: ListPolicies :many
SELECT p.id, p.org_id, p.policy_type, p.config, p.enabled, p.created_at, p.updated_at FROM policies p
JOIN policy_applications pa ON p.id = pa.policy_id
WHERE pa.app_id = $1
ORDER BY p.policy_type
LIMIT $2 OFFSET $3
`

type ListPoliciesParams struct {
	AppID  uuid.UUID `json:"app_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListPolicies(ctx context.Context, arg ListPoliciesParams) ([]Policy, error) {
	rows, err := q.db.Query(ctx, listPolicies, arg.AppID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Policy
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.PolicyType,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePolicy = `-- name: UpdatePolicy :one
UPDATE policies
SET policy_type = $2,
    config = $3,
    enabled = $4,
    updated_at = now()
WHERE id = $1
RETURNING id, org_id, policy_type, config, enabled, created_at, updated_at
`

type UpdatePolicyParams struct {
	ID         uuid.UUID `json:"id"`
	PolicyType string    `json:"policy_type"`
	Config     []byte    `json:"config"`
	Enabled    bool      `json:"enabled"`
}

func (q *Queries) UpdatePolicy(ctx context.Context, arg UpdatePolicyParams) (Policy, error) {
	row := q.db.QueryRow(ctx, updatePolicy,
		arg.ID,
		arg.PolicyType,
		arg.Config,
		arg.Enabled,
	)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.PolicyType,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
