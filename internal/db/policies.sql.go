// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: policies.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPolicy = `-- name: CreatePolicy :one
INSERT INTO policies (
  org_id, app_id, policy_type, config, enabled
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, org_id, app_id, policy_type, config, enabled, created_at, updated_at
`

type CreatePolicyParams struct {
	OrgID      uuid.UUID `json:"org_id"`
	AppID      uuid.UUID `json:"app_id"`
	PolicyType string    `json:"policy_type"`
	Config     []byte    `json:"config"`
	Enabled    bool      `json:"enabled"`
}

func (q *Queries) CreatePolicy(ctx context.Context, arg CreatePolicyParams) (Policy, error) {
	row := q.db.QueryRow(ctx, createPolicy,
		arg.OrgID,
		arg.AppID,
		arg.PolicyType,
		arg.Config,
		arg.Enabled,
	)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.AppID,
		&i.PolicyType,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePolicy = `-- name: DeletePolicy :exec
DELETE FROM policies
WHERE id = $1
`

func (q *Queries) DeletePolicy(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePolicy, id)
	return err
}

const disablePolicy = `-- name: DisablePolicy :exec
UPDATE policies
SET enabled = false,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) DisablePolicy(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, disablePolicy, id)
	return err
}

const enablePolicy = `-- name: EnablePolicy :exec
UPDATE policies
SET enabled = true,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) EnablePolicy(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, enablePolicy, id)
	return err
}

const getPoliciesByType = `-- name: GetPoliciesByType :many
SELECT id, org_id, app_id, policy_type, config, enabled, created_at, updated_at FROM policies
WHERE app_id = $1 AND policy_type = $2
ORDER BY created_at
`

type GetPoliciesByTypeParams struct {
	AppID      uuid.UUID `json:"app_id"`
	PolicyType string    `json:"policy_type"`
}

func (q *Queries) GetPoliciesByType(ctx context.Context, arg GetPoliciesByTypeParams) ([]Policy, error) {
	rows, err := q.db.Query(ctx, getPoliciesByType, arg.AppID, arg.PolicyType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Policy
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.AppID,
			&i.PolicyType,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPolicy = `-- name: GetPolicy :one
SELECT id, org_id, app_id, policy_type, config, enabled, created_at, updated_at FROM policies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPolicy(ctx context.Context, id uuid.UUID) (Policy, error) {
	row := q.db.QueryRow(ctx, getPolicy, id)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.AppID,
		&i.PolicyType,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEnabledPolicies = `-- name: ListEnabledPolicies :many
SELECT id, org_id, app_id, policy_type, config, enabled, created_at, updated_at FROM policies
WHERE app_id = $1 AND enabled = true
ORDER BY policy_type
`

func (q *Queries) ListEnabledPolicies(ctx context.Context, appID uuid.UUID) ([]Policy, error) {
	rows, err := q.db.Query(ctx, listEnabledPolicies, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Policy
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.AppID,
			&i.PolicyType,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPolicies = `-- name: ListPolicies :many
SELECT id, org_id, app_id, policy_type, config, enabled, created_at, updated_at FROM policies
WHERE app_id = $1
ORDER BY policy_type
`

func (q *Queries) ListPolicies(ctx context.Context, appID uuid.UUID) ([]Policy, error) {
	rows, err := q.db.Query(ctx, listPolicies, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Policy
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.AppID,
			&i.PolicyType,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePolicy = `-- name: UpdatePolicy :one
UPDATE policies
SET policy_type = $2,
    config = $3,
    enabled = $4,
    updated_at = now()
WHERE id = $1
RETURNING id, org_id, app_id, policy_type, config, enabled, created_at, updated_at
`

type UpdatePolicyParams struct {
	ID         uuid.UUID `json:"id"`
	PolicyType string    `json:"policy_type"`
	Config     []byte    `json:"config"`
	Enabled    bool      `json:"enabled"`
}

func (q *Queries) UpdatePolicy(ctx context.Context, arg UpdatePolicyParams) (Policy, error) {
	row := q.db.QueryRow(ctx, updatePolicy,
		arg.ID,
		arg.PolicyType,
		arg.Config,
		arg.Enabled,
	)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.AppID,
		&i.PolicyType,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
