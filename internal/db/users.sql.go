// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (user_id, role_id, org_id)
VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type AssignRoleToUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
	OrgID  uuid.UUID `json:"org_id"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.UserID, arg.RoleID, arg.OrgID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (org_id, sub, email, name)
VALUES ($1, $2, $3, $4)
RETURNING id, org_id, sub, email, name, created_at, updated_at
`

type CreateUserParams struct {
	OrgID uuid.UUID `json:"org_id"`
	Sub   *string   `json:"sub"`
	Email string    `json:"email"`
	Name  *string   `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.OrgID,
		arg.Sub,
		arg.Email,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Sub,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserBySubOrEmail = `-- name: FindUserBySubOrEmail :one
SELECT id, org_id, sub, email, name, created_at, updated_at FROM users
WHERE sub = $1 OR email = $2
LIMIT 1
`

type FindUserBySubOrEmailParams struct {
	Sub   *string `json:"sub"`
	Email string  `json:"email"`
}

func (q *Queries) FindUserBySubOrEmail(ctx context.Context, arg FindUserBySubOrEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserBySubOrEmail, arg.Sub, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Sub,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
