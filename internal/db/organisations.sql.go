// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organisations.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrg = `-- name: CreateOrg :one
INSERT INTO organisations (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateOrg(ctx context.Context, name string) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrg, name)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrgByID = `-- name: FindOrgByID :one
SELECT id, name, created_at, updated_at FROM organisations
WHERE id = $1
`

func (q *Queries) FindOrgByID(ctx context.Context, id uuid.UUID) (Organisation, error) {
	row := q.db.QueryRow(ctx, findOrgByID, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
